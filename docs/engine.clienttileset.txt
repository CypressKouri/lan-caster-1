pygame 2.1.2 (SDL 2.0.16, Python 3.6.7)
Hello from the pygame community. https://www.pygame.org/contribute.html
Help on module engine.clienttileset in engine:

NAME
    engine.clienttileset - Extends Tileset class for use by Client

CLASSES
    engine.tileset.Tileset(builtins.dict)
        ClientTileset
    
    class ClientTileset(engine.tileset.Tileset)
     |  The ClientTileset class is responsible for:
     |      1) Loading tileset image so it an be used by the game engine.
     |      2) Provide tile render method.
     |  
     |  Method resolution order:
     |      ClientTileset
     |      engine.tileset.Tileset
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, tilesetFile)
     |      Load tileset image file.
     |      
     |      This requires that pygame was already initialized by other code
     |      before __init__ was called.
     |      
     |      Extends:
     |          engine.tileset.Tileset.__init__()
     |  
     |  blitTile(self, tileNumber, destImage, destX, destY, tileObject=False)
     |      blit tileNumber's pixels into destImage.
     |      
     |      Args:
     |          tileNumber (int)
     |          destImage (pygame Surface): Surfact to blit tile onto.
     |          destX (int): x in destImage to start blitting tile (left edge)
     |          destY (int): y in destImage to start blitting tile (top edge)
     |          tileObject (dict): object (sprite) associated with tile. May be used
     |              to determine the effective tileNumber to blit.
     |      
     |      Returns:
     |          validUntil (float): time after which graphic of tile will change.
     |  
     |  effectiveTileNumber(self, tileNumber, tileObject=False)
     |      return the effective tileNumber based several criteria
     |      
     |      Args:
     |          tileNumber (int)
     |          tileObject (dict): object (sprite) associated with tile. May be used
     |              to determine the effective tileNumber to blit.
     |      
     |      Returns:
     |          effectiveTileNumber (int)
     |          validUntil (float): time after which effective tileNumber will change.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from engine.tileset.Tileset:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  getAnchorX(self, tileNumber)
     |      Return X anchor point of tileNumber.
     |      
     |      Search for most specific anchorX for tileNumber. Look first for
     |      "anchorX" property in the tile itself, then for "anchorX" property
     |      in the tileset. If nothing is found then assume the anchoX is in
     |      the middle of the the tile.
     |      
     |      Args:
     |          tileNumber (int)
     |      
     |      Returns:
     |          anchorX (int)
     |  
     |  getAnchorY(self, tileNumber)
     |      Return Y anchor point of tileNumber.
     |      
     |      Search for most specific anchorY for tileNumber. Look first for
     |      "anchorY" property in the tile itself, then for "anchorY" property
     |      in the tileset. If nothing is found then assume the anchoY is in
     |      the middle of the the tile.
     |      
     |      Args:
     |          tileNumber (int)
     |      
     |      Returns:
     |          anchorY (int)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from engine.tileset.Tileset:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if D has a key k, else False.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Returns a new dict with keys from iterable and values equal to value.
     |  
     |  get(...)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(...)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
     |      2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(...)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

