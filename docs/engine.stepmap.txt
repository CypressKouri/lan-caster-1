Help on module engine.stepmap in engine:

NAME
    engine.stepmap - Map Step Processor

CLASSES
    engine.map.Map(builtins.dict)
        StepMap
    
    class StepMap(engine.map.Map)
     |  Class which implements stepping the game forward in time.
     |  
     |  The StepMap class is responsible for calling the game logic, located 
     |  in sub-classes, which takes the game forward one step in time. It
     |  does this by finding methods that match the naming format and then
     |  calling those methods in a very specific order during each step. 
     |  Using the various methods name formats, a sub-classes can implement 
     |  many different game mechanics.
     |  
     |  The method name formats StepMap looks for are as follows. Except 
     |  for init<MechanicName>() the methods are called in this order
     |  during each step:
     |  
     |      0) init<MechanicName>(): Called only once when the map is loaded.
     |  
     |      1) stepMapStart<MechanicName>(): Called once at the start of each step.
     |  
     |      2) stepSpriteStart<MechanicName>(sprite): Called for every object
     |          on the sprite layer.
     |  
     |      3) trigger<MechanicName>(trigger, sprite): Called for every trigger 
     |          and sprite combination where the sprite anchor point is inside 
     |          the trigger.
     |  
     |      4) stepMove<MechanicName>(sprite): Called for every object
     |          on the sprite layer.
     |  
     |      5) stepSpriteEnd<MechanicName>(sprite): Called for every object
     |          on the sprite layer.
     |  
     |      6) stepMapEnd<MechanicName>(): Called once at the end of each step.
     |  
     |  <MechanicName> is replaced with the name of the game mechanic 
     |  being implemented.
     |  
     |  Besides implementing the step methods above, a game mechanic
     |  may need to extend, override, or implement other methods.
     |  See examples of implementing game mechanics in engine.servermap and 
     |  the various servermaps of the enginetest and demo games.
     |  
     |  The Server normally only calls the engine.stepmap.StepMap.StepMap()
     |  method if at least one player is on the map. So game logic stops for
     |  maps with no players.
     |  
     |  Also, the Server class normally calls stepServerStart() before the
     |  all the maps process there steps and calls stepServerEnd() after
     |  all maps have processed their steps. 
     |  See engine.server.Server.stepServer() for details.
     |  
     |  Method resolution order:
     |      StepMap
     |      engine.map.Map
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, tilesets, mapDir)
     |      Extents engine.map.Map.__init__()
     |      
     |      Finds and calls the init<MechanicName>() methods.
     |      Finds all methods that match each step method type format.
     |      Sorts all methods by type and priority.
     |  
     |  addStepMethodPriority(self, stepMethodType, stepMethodName, priority)
     |      Set the prioriy of a step method. 
     |      
     |      This is normally used by subclass init* methods to prioritize step 
     |      methods before finding and sorting them.
     |      
     |      Args:
     |          stepMethodType (str): One of self['stepMethodPriority']
     |          stepMethodName (str): A method name that starts with stepMethodType
     |          priority (int): The priority of stepMethodName.Lower number is 
     |              higher priority.
     |  
     |  getAllMethodsStr(self)
     |      Return a multi-line string of all map init*, step*, and trigger* methods.
     |  
     |  getTriggerMethodName(self, trigger)
     |      Given a trigger name, return the name of a trigger's method.
     |      
     |      Convert a trigger type (eg. trigger['type'] == "mapDoor") to method 
     |      name (eg. "triggerMapDoor")
     |      
     |      Args:
     |          trigger (dict): Tiled object that is on this maps trigger layer.
     |      
     |      Returns:
     |          str: The name of the method used to process the trigger.
     |  
     |  stepMap(self)
     |      Move the map forward one step in time
     |  
     |  stepTriggers(self, sprite)
     |      Process all triggers for a sprite.
     |      
     |      Find all triggers (objects on the trigger layer) that contain this 
     |      sprite's anchor and call the corresponding trigger* method.
     |      
     |      The search excludes the sprite itself from the search 
     |      since objects may be on the sprite and trigger layer at the
     |      same time.
     |      
     |      Args:
     |          sprite (dict): Tiled object from the sprite layer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from engine.map.Map:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  addObject(self, object, objectList=False)
     |      Add a Tiled object to an object list.
     |      
     |      Used to add Tiled objects (e.g. sprites) to the object list of a layer.
     |      The default objectList is self['sprites'].
     |      
     |      Args:
     |          object (dict): Tiled object
     |          objectList (dict): An objectList from a layer on this map.
     |  
     |  checkKeys(self, object, props)
     |      Check if all props are keys in object.
     |      
     |      This can be used by a method to check if an object has all the
     |      data required. If data is missing then a warning
     |      is logged that suggests where the data may be missing from.
     |      
     |      Args:
     |          object (dict): Tiled object 
     |          props (list): A list of keys. e.g. ["prop-deltaX", "anchorX"]
     |      
     |      Returns:
     |          bool: True if all props are in object else False
     |  
     |  checkObject(self, object)
     |      Check that object has required keys.
     |      
     |      Ensure object meets all basic criteria that are required by the server.
     |      If an empty object ({}) is passed then it is populated with default
     |      values until it meets the minimum requirements of a Tiled object.
     |      
     |      The minimum object contains:
     |      {
     |          'name': (str)
     |          'type': (str)
     |          'x': (float)
     |          'y': (float)
     |          'width': (float)
     |          'height': (float)
     |          'anchorX': (float)
     |          'anchorY': (float)
     |          'mapName': (str) The last map the object was on (or is still on).
     |      
     |          Only for tile objects have the following:
     |          'gid': (int) Map Global Tile ID.
     |          'tilesetName': (str) Tile Tileset Name.
     |          'tilesetTileNumber': (int) Tileset Tile Number.
     |      }
     |      
     |      Args:
     |          object (dict)
     |      
     |      Returns:
     |          object (dict): Object is both edited in place and also returned.
     |  
     |  convertTiledColor(self, tiledColor)
     |      Convert Tiled HEX format
     |      
     |      Tiled hex colors with alpha are '#AARRGGBB' format but pygame 
     |      needs '#RRGGBBAA' so flip alpha to the end.
     |  
     |  convertTiledProps(self, object)
     |      Convert Tiled properties to easy to use format.
     |      
     |      If 'properties' is in object then remove it and
     |      add prop-<name> to object for each property in
     |      'properties'.
     |      
     |      Args:
     |          object (dict): An object to evaluate.
     |  
     |  findGid(self, tilesetSearchName, tilesetTileSearchNumber)
     |      Converts a tileset specific tile number to a Gid of this map.
     |      
     |      This requires that tilesetSearchName is a tileset in this map!
     |      
     |      Args:
     |          tilesetSearchName (str): The name of a tileset.
     |          tilesetTileSearchNumber (int): A tile number from tilesetSearchName
     |      
     |      Returns:
     |          tileGid (int): A map global tile number.
     |  
     |  findObject(self, x=None, y=None, name=False, type=False, objectList=False, exclude=False, returnAll=False)
     |      Find a Tiled object that matches ALL criteria provided.
     |      
     |      Args:
     |          x (float), y (float): Find object that contains (x, y)
     |          name (str): Find object with object['name'] == name
     |          type (str): Find object with object['type'] == type
     |          objectList (dict): a list of objects to search. default is self['sprites']
     |          exclude (dict): a Tiled object. Skip this object while searching. Normally used
     |              to ensure an object does not find itself.
     |          returnAll (bool): Return a list of all matching objects, else return only the first
     |              matching object found.
     |      
     |      Returns: (one of the following)
     |          object (dict): A single Tiled object if a matching object was found and returnAll==False.
     |          False (bool): If no object was found and returnAll==False.
     |          objects (list): A possibly empty list of matching Tiled objects if returnAll==True.
     |  
     |  findTile(self, tileGid)
     |      Converts Tiled Gid for this map to a specific tileset name and tileset tile number.
     |      
     |      Args:
     |          tileGid (int): a map global tile number.
     |      
     |      Returns:
     |          tilesetName (str): name of tileset which contians tileGid
     |          tilesetTileNumber (int): tileNumber relative to tilesetName
     |  
     |  getLayerVisablityMask(self)
     |      LAYER VISABILITY MECHANIC: Return bit mask for the visibility of all layers in self['layers']
     |      
     |      Returns:
     |          layerVisabilityMask (int): bitmask where left most bit relates
     |              the visibility of layerIndex 0, the next bit relates to
     |              layerIndex 1, and so on.
     |  
     |  getLayerVisablitybyIndex(self, layerIndex)
     |      LAYER VISABILITY MECHANIC: Return true if layer is set to visible else return False.
     |      
     |      Args:
     |          layerIndex (int)
     |      
     |      Returns:
     |          bool
     |  
     |  getLayerVisablitybyName(self, layerName)
     |      LAYER VISABILITY MECHANIC: Return true if layer is set to visible else return False.
     |      
     |      Args:
     |          layerName (str)
     |      
     |      Returns:
     |          bool
     |  
     |  removeObject(self, object, objectList=False)
     |      Remove a Tiled object from an object list.
     |      
     |      Used to remove Tiled objects (e.g. sprites) from the object list of a layer.
     |      The default objectList is self['sprites'].
     |      
     |      Note, this does not alter object['mapName'] since the object could be in
     |      other objectLists on this map.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          objectList (dict): An objectList from a layer on this map.
     |  
     |  removeObjectFromAllLayers(self, object)
     |      Remove a Tiled object from all layers of this map.
     |      
     |      Used to remove Tiled objects (e.g. sprites) from the object list
     |      of all layers on this map.
     |      
     |      Note, this does not alter object['mapName'] since the object could
     |      be in the middle of being processed by a step loop that needs that
     |      data.
     |      
     |      Args:
     |          object (dict): Tiled object
     |  
     |  setLayerVisablityMask(self, layerVisabilityMask)
     |      LAYER VISABILITY MECHANIC: Set bit mask for the visibility of all layers in self['layers']
     |      
     |      Args:
     |          layerVisabilityMask (int): bitmask where left most bit relates
     |              the visibility of layerIndex 0, the next bit relates to
     |              layerIndex 1, and so on.
     |      
     |      Returns:
     |          bool: True if the layerVisabilityMask mask was different from 
     |              the mask that was already set.
     |  
     |  setLayerVisablitybyIndex(self, layerIndex, visable)
     |      LAYER VISABILITY MECHANIC: Show/Hide layer by index.
     |      
     |      Args:
     |          layerIndex (str): The index of a layer in self['layers'].
     |          visable (bool): True == visible.
     |  
     |  setLayerVisablitybyName(self, layerName, visable)
     |      LAYER VISABILITY MECHANIC: Show/Hide layer by name.
     |      
     |      Args:
     |          layerName (str): The name of a layer as defined in Tiled.
     |          visable (bool): True == visible.
     |  
     |  setMapChanged(self, changed=True)
     |      flag the map has changed (True) or not changed (False).
     |      
     |      This is used to determine if the server needs to send an
     |      update to clients.
     |  
     |  setObjectLocationByAnchor(self, object, anchorX, anchorY)
     |      Set an objects location using its anchor point.
     |      
     |      Updates an object anchor point and then sets it x, y to match.
     |      
     |      Args:
     |          object (dict): A Tiled Object
     |          x (float)
     |          y (float)
     |  
     |  setObjectLocationByXY(self, object, x, y)
     |      Set an objects location using its top/left corner.
     |      
     |      Updates an object x,y and then sets it anchor point to match.
     |      Do not use without good reason. Most objects should have their
     |      location set by setObjectLocationByAnchor()
     |      
     |      Args:
     |          object (dict): A Tiled Object
     |          x (float)
     |          y (float)
     |  
     |  setObjectMap(self, object, destMap)
     |      Move a Tiled object to a differnt map.
     |      
     |      Remove object from all known layers on this map and add
     |      it to the same layers on destMap.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          destMap (engine.map.Map)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from engine.map.Map:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if D has a key k, else False.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Returns a new dict with keys from iterable and values equal to value.
     |  
     |  get(...)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(...)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
     |      2-tuple; but raise KeyError if D is empty.
     |  
     |  setdefault(...)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

